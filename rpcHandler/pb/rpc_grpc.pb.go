// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllRpcServerClient is the client API for AllRpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllRpcServerClient interface {
	GetUidByToken(ctx context.Context, in *Tokenmsg, opts ...grpc.CallOption) (*UserIDmsg, error)
	GetdIDByToken(ctx context.Context, in *Tokenmsg, opts ...grpc.CallOption) (*DeviceIDsmsg, error)
	GetDataTypeBydID(ctx context.Context, in *Didmsg, opts ...grpc.CallOption) (*DataTypemsg, error)
}

type allRpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAllRpcServerClient(cc grpc.ClientConnInterface) AllRpcServerClient {
	return &allRpcServerClient{cc}
}

func (c *allRpcServerClient) GetUidByToken(ctx context.Context, in *Tokenmsg, opts ...grpc.CallOption) (*UserIDmsg, error) {
	out := new(UserIDmsg)
	err := c.cc.Invoke(ctx, "/pb.allRpcServer/GetUidByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allRpcServerClient) GetdIDByToken(ctx context.Context, in *Tokenmsg, opts ...grpc.CallOption) (*DeviceIDsmsg, error) {
	out := new(DeviceIDsmsg)
	err := c.cc.Invoke(ctx, "/pb.allRpcServer/GetdIDByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allRpcServerClient) GetDataTypeBydID(ctx context.Context, in *Didmsg, opts ...grpc.CallOption) (*DataTypemsg, error) {
	out := new(DataTypemsg)
	err := c.cc.Invoke(ctx, "/pb.allRpcServer/GetDataTypeBydID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllRpcServerServer is the server API for AllRpcServer service.
// All implementations must embed UnimplementedAllRpcServerServer
// for forward compatibility
type AllRpcServerServer interface {
	GetUidByToken(context.Context, *Tokenmsg) (*UserIDmsg, error)
	GetdIDByToken(context.Context, *Tokenmsg) (*DeviceIDsmsg, error)
	GetDataTypeBydID(context.Context, *Didmsg) (*DataTypemsg, error)
	mustEmbedUnimplementedAllRpcServerServer()
}

// UnimplementedAllRpcServerServer must be embedded to have forward compatible implementations.
type UnimplementedAllRpcServerServer struct {
}

func (UnimplementedAllRpcServerServer) GetUidByToken(context.Context, *Tokenmsg) (*UserIDmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUidByToken not implemented")
}
func (UnimplementedAllRpcServerServer) GetdIDByToken(context.Context, *Tokenmsg) (*DeviceIDsmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetdIDByToken not implemented")
}
func (UnimplementedAllRpcServerServer) GetDataTypeBydID(context.Context, *Didmsg) (*DataTypemsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataTypeBydID not implemented")
}
func (UnimplementedAllRpcServerServer) mustEmbedUnimplementedAllRpcServerServer() {}

// UnsafeAllRpcServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllRpcServerServer will
// result in compilation errors.
type UnsafeAllRpcServerServer interface {
	mustEmbedUnimplementedAllRpcServerServer()
}

func RegisterAllRpcServerServer(s grpc.ServiceRegistrar, srv AllRpcServerServer) {
	s.RegisterService(&AllRpcServer_ServiceDesc, srv)
}

func _AllRpcServer_GetUidByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tokenmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllRpcServerServer).GetUidByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.allRpcServer/GetUidByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllRpcServerServer).GetUidByToken(ctx, req.(*Tokenmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllRpcServer_GetdIDByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tokenmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllRpcServerServer).GetdIDByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.allRpcServer/GetdIDByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllRpcServerServer).GetdIDByToken(ctx, req.(*Tokenmsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllRpcServer_GetDataTypeBydID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Didmsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllRpcServerServer).GetDataTypeBydID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.allRpcServer/GetDataTypeBydID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllRpcServerServer).GetDataTypeBydID(ctx, req.(*Didmsg))
	}
	return interceptor(ctx, in, info, handler)
}

// AllRpcServer_ServiceDesc is the grpc.ServiceDesc for AllRpcServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllRpcServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.allRpcServer",
	HandlerType: (*AllRpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUidByToken",
			Handler:    _AllRpcServer_GetUidByToken_Handler,
		},
		{
			MethodName: "GetdIDByToken",
			Handler:    _AllRpcServer_GetdIDByToken_Handler,
		},
		{
			MethodName: "GetDataTypeBydID",
			Handler:    _AllRpcServer_GetDataTypeBydID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
